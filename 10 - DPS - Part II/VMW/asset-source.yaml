---
# Thanks to clifford.rodriguez@dell.com and go to https://github.com/SkunkworksAutomation for all automation things for DPS
# also check out https://github.com/dell/ansible-datadomain

- name: "Configure PPDM to add asset source for Virtual Machines"
  hosts: localhost
  collections:
    - community.vmware
  become: no
  gather_facts: false

  vars:
  vars_files:
    - var/credentials.yaml

  tasks:


# WAIT FOR HTTPS RESPONSE FROM POWERPROTECT DATA MANAGER
  - name: "( {{ppdm_host}} ): Wait for HTTPS connectivity"
    wait_for:
      host: "{{ppdm_host}}"
      port: 443
      state: started
      delay: 1
      sleep: 60
      timeout: 600
    register: waitforppdm
    

# AUTHENTICATE TO THE POWERPROTECT REST API & GRAB ACCESS TOKEN
  - name: "( {{ppdm_host}} ): Authenticate to PowerProtect DM Rest API"
    uri:
      url: "https://{{ ppdm_host }}:8443/api/v2/login"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body:
        username: "{{ ppdm_id }}"
        password: "{{ppdm_pwd}}"
      status_code: 200
    register: token

  - name:
    debug:
      var: token.json.access_token

# GET THE INITIAL CONFIGURATION ID
  - name: "( {{ppdm_host}} ): Get the initial PowerProtect configuration"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/configurations
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
    register: config
  
  - name:
    debug:
      var: config.json.content[0].id
      

# GET THE CONFIG STATUS
  - name: "( {{ppdm_host}} ): Check the PowerProtect config status to see if it is complete"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/configurations/{{config.json.content[0].id}}/config-status
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
    register: monitor
    until: monitor.status == 200 and monitor.json.percentageCompleted == 100
    retries: 180
    delay: 10


# ENABLE VMware and K8s ASSET SOURCE
  - name: "( {{ppdm_host}} ): Enable VMware AND k8S asset source"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/common-settings/ASSET_SETTING
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: PUT
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
              "id": "ASSET_SETTING",
              "properties": [
                  {
                      "name": "enabledAssetTypes",
                      "type": "LIST",
                      "value": "VMWARE_VIRTUAL_MACHINE,KUBERNETES"
                  }
              ]
          }
      status_code: 200
    register: settings
    

# GET THE VCENTER CERTIFICATE
  - name: "( {{ppdm_host}} ): Get the vCenter Certificate using https://{{ppdm_host}}:8443/api/v2/certificates?host={{vcenter_host}}&port=443&type=Host"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/certificates?host={{vcenter_host}}&port=443&type=Host
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
      #status_code: 200
    register: vc_cert
    # until: vc_cert.status == 200
    # retries: 90
    # delay: 10

  # - name:
  #   debug:
  #     var: vc_cert.json[0]

# ACCEPT THE VCENTER CERTIFICATE
  - name: "( {{ppdm_host}} ): Accept the vCenter certificate"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/certificates/{{vc_cert.json[0].id}}
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: PUT
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
            "fingerprint": "{{vc_cert.json[0].fingerprint}}",
            "host": "{{vc_cert.json[0].host}}",
            "id": "{{vc_cert.json[0].id}}",
            "issuerName": "{{vc_cert.json[0].issuerName}}",
            "notValidAfter": "{{vc_cert.json[0].notValidAfter}}",
            "notValidBefore": "{{vc_cert.json[0].notValidBefore}}",
            "port": "{{vc_cert.json[0].port}}",
            "state": "ACCEPTED",
            "subjectName": "{{vc_cert.json[0].subjectName}}",
            "type": "{{vc_cert.json[0].type}}"
          }
      status_code: 200
    register: accept_vc_cert
    until: accept_vc_cert.status == 200
    retries: 90
    delay: 10

  - name:
    debug:
      var: accept_vc_cert.json

 #CREATE VCENTER CREDENTIALS
  - name: "( {{ppdm_host}} ): Create vCenter credentials"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/credentials
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
              "type": "VCENTER",
              "username": "{{vcenter_id}}",
              "password": "{{vcenter_pwd}}",
              "name": "ADMINISTRATOR"
          }
      status_code: [200,201,403]
    register: vc_creds
    until: vc_creds.status == 200 or vc_creds.status == 201 or vc_creds.status == 403
    retries: 90
    delay: 10


  - name:
    debug:
      var: vc_creds.json

# ADD THE VCENTER SERVER
  - name: "( {{ppdm_host}} ): Add the vCenter server"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/inventory-sources
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
            "type": "VCENTER",
            "name": "{{vcenter_host}}",
            "port": 443,
            "credentials": {
              "id": "{{vc_creds.json.id}}"
            },
            "address": "{{vcenter_host}}"
          }
      status_code: 201
    register: vcenter
  
  - name:
    debug:
      var: vcenter.json


    

# GET THE ACTIVITY FOR THE VCENTER DISCOVERY
  - name: "( {{ppdm_host}} ): Get the activity id for the VM Inventory Discovery"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/activities?filter=name%20eq%20%22VM%20Inventory%20Discovery%22
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
    register: activity

  - name:
    debug:
      var: activity.json

# GET THE ACTIVITY STATUS
  - name: "( {{ ppdm_host }} ): Check the VM Inventory Discovery activity status {{ activity.json.content[0].id }}"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/activities/{{ activity.json.content[0].id }}
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
    when: activity.json.content | length > 0
    register: activitystatus
    until: activitystatus.status == 200 and activitystatus.json.progress == 100 and activitystatus.json.state == 'COMPLETED'
    retries: 180
    delay: 10

  - name:
    debug:
      var: activitystatus.json
    when: activitystatus.json is defined

# IF THE INITIAL VCENTER DISCOVERY FAILED

# GET THE VCENTER INVENTORY SOURCE
  - name: "( {{ppdm_host}} ): Get the vCenter inventory source"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/inventory-sources?filter=name%20eq%20%22{{vcenter_host}}%22
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
    when: activitystatus.json.result.status == "FAILED"
    register: vcenter

# START A MANUAL DISCOVERY
  - name: "( {{ppdm_host}} ): Start a manual discovery of vcenter"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/discoveries
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
            "start":"/inventory-sources/{{vcenter.json.content[0].id}}",
            "level":"DataCopies"
          }
      status_code: 202
    when: activitystatus.json.result.status == "FAILED"
    register: discovery

  - name:
    debug:
      var: discovery.json
    when: activitystatus.json.result.status == "FAILED"




# LOGOUT OF THE REST API
#  - name: "( {{ ppdm_host }}): Logout of the REST API"
#    uri:
#      url: "https://{{ ppdm_host }}:8443/api/v2/logout"
#      headers:
#        Authorization: "Bearer {{token.json.access_token}}"
#        Content-Type: "application/json"
#      method: POST
#      validate_certs: no
#      return_content: yes
#      body_format: json
#      status_code: 204