---
# Thanks to clifford.rodriguez@dell.com and go to https://github.com/SkunkworksAutomation for all automation things for DPS
# also check out https://github.com/dell/ansible-datadomain

- name: "Configure PPDM to add asset source for Kubernetes"
  hosts: localhost
  collections:
    - community.vmware
  become: no
  gather_facts: false

  vars:
  # Generate  unqiue uuid for POLICY-VM01
    rg1_uuid: "{{ lookup( 'password', '/dev/null length=32' ) | to_uuid }}"
    k8s_namespace: minecraft
    policy_name: POLICY-KUBERNETES-01

  vars_files:
    - credentials.yaml

  tasks:


# WAIT FOR HTTPS RESPONSE FROM POWERPROTECT DATA DOMAIN
  - name: " {{ddvmname}} - Waiting for HTTPS connectivity."
    wait_for:
      host: "{{ddve_ip}}"
      port: 443
      state: started
      delay: 1
      sleep: 60
      timeout: 600
    register: waitforddve

   

# AUTHENTICATE TO THE POWERPROTECT REST API & GRAB ACCESS TOKEN
  - name: "( {{ppdm_ip}} ): Authenticate to PowerProtect DM Rest API"
    uri:
      url: "https://{{ ppdm_ip }}:8443/api/v2/login"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body:
        username: "{{ ppdm_id }}"
        password: "{{ppdm_pwd}}"
      status_code: 200
    register: token

  - name:
    debug:
      var: token.json.access_token

# GET THE INITIAL CONFIGURATION ID
  - name: "( {{ppdm_host}} ): Get the initial PowerProtect configuration"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/configurations
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
    register: config

  - name:
    debug:
      var: config.json.content[0].id

# GET THE CONFIG STATUS
  - name: "( {{ppdm_host}} ): Check the PowerProtect config status to see if it is complete"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/configurations/{{config.json.content[0].id}}/config-status
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
    register: monitor
    until: monitor.status == 200 and monitor.json.percentageCompleted == 100
    retries: 180
    delay: 10

# ENABLE VMware and K8s ASSET SOURCE
  - name: "( {{ppdm_host}} ): Enable VMware AND k8S asset source"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/common-settings/ASSET_SETTING
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: PUT
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
              "id": "ASSET_SETTING",
              "properties": [
                  {
                      "name": "enabledAssetTypes",
                      "type": "LIST",
                      "value": "VMWARE_VIRTUAL_MACHINE,KUBERNETES"
                  }
              ]
          }
      status_code: 200
    register: settings

# GET THE VCENTER CERTIFICATE
  - name: "( {{ppdm_host}} ): Get the vCenter Certificate using https://{{ppdm_host}}:8443/api/v2/certificates?host={{cluster_ip}}&port={{cluster_port}}&type=Root"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/certificates?host={{cluster_ip}}&port={{cluster_port}}&type=Root
      #https://{{ ppdm_ip }}:8443/api/v2/certificates?host={{ cluster_ip }}&port={{ cluster_port }}&type=Root
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
      #status_code: 200
    register: k8_cert
    # until: k8_cert.status == 200
    # retries: 90
    # delay: 10

  # - name:
  #   debug:
  #     var: k8_cert.json[0]

# ACCEPT THE  CERTIFICATE
  - name: "( {{ppdm_host}} ): Accept the Kubernetes certificate"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/certificates/{{k8_cert.json[0].id}}
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: PUT
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
            "fingerprint": "{{k8_cert.json[0].fingerprint}}",
            "host": "{{k8_cert.json[0].host}}",
            "id": "{{k8_cert.json[0].id}}",
            "issuerName": "{{k8_cert.json[0].issuerName}}",
            "notValidAfter": "{{k8_cert.json[0].notValidAfter}}",
            "notValidBefore": "{{k8_cert.json[0].notValidBefore}}",
            "port": "{{k8_cert.json[0].port}}",
            "state": "ACCEPTED",
            "subjectName": "{{k8_cert.json[0].subjectName}}",
            "type": "{{k8_cert.json[0].type}}"
          }
      status_code: 200
    register: accept_k8_cert
    until: accept_k8_cert.status == 200
    retries: 90
    delay: 10

  - name:
    debug:
      var: accept_k8_cert.json

# create ppdm namespace
  - name: Create a k8s namespace ppdm
    kubernetes.core.k8s:
      name: ppdm
      api_version: v1
      kind: Namespace
      state: present

# Create a Service Account for PPDM
  - name: Create Service Account for PPDM
    kubernetes.core.k8s:
      state: present
      src: https://raw.githubusercontent.com/DTW2023/IaC/main/10%20-%20DPS%20-%20Part%20II/K8s/ppdm-user.yaml

# Generate Token for PPDM User
  - name: get token
    command: "kubectl -n ppdm create token ppdm-user"
    register: ppdm_token

# Show the token, this wiill be used to configure PPDM
  - name: Display Token
    debug:
      var: ppdm_token.stdout_lines[0]

  - name: "Add Credentials for Cluster {{ cluster_ip }} on {{ vmname }}"
    uri:
      url: "https://{{ ppdm_ip }}:8443/api/v2/credentials"
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      status_code: [200,201,403]
      body: |
        {"type":"KUBERNETES","name":"{{ cluster_name }}","password":"{{ ppdm_token.stdout_lines[0] }}","method":"TOKEN"}
    register: kube_creds
    until: kube_creds.status == 200 or kube_creds.status == 201 or kube_creds.status == 403
    retries: 90
    delay: 10

  - name: kube_creds.json
    debug:
      var: kube_creds.json


  - name: "Add cluster {{ cluster_ip }} as a source on {{ vmname }}"
    uri:
      url: "https://{{ ppdm_ip }}:8443/api/v2/inventory-sources"
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      status_code: 201
      body: |
        {"id":"","name":"{{ cluster_name }}","version":"","type":"KUBERNETES","lastDiscovered":"","address":"{{ cluster_ip }}","port":"{{ cluster_port }}","credentials":{"id":"{{ kube_creds.json.id }}"},"ssl":false,"details":{"k8s":{"vCenterId":null,"distributionType":"NON_VSPHERE","configurations":[]}},"_links":{}}
    register: kube_source

  - name:
    debug:
      var: kube_source.json

  - name: "Pause for 60 seconds for Initial Discovery for inventory source {{ cluster_name }}"
    ansible.builtin.pause:
      seconds: 60

#Create a ppdm-snapshot-storage-class-mapping for PPDM in namespace powerprotect
  - name: Create Service Account for PPDM in namespace powerprotect
    kubernetes.core.k8s:
      state: present
      src: https://raw.githubusercontent.com/DTW2023/IaC/main/10%20-%20DPS%20-%20Part%20II/K8s/snapshot-configmap.yaml



# GET THE ATTACHED POWERPROTECT DD SYSTEM
  - name: "( {{ppdm_host}} ): Get the attached PowerProtect DD system"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/storage-systems?filter=type%20eq%20%22DATA_DOMAIN_SYSTEM%22%20and%20name%20eq%20%22{{ddve_host}}.{{ad_domain}}%22
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
    register: storage

# CREATE THE K8s POLICY
  - name: "( {{ppdm_host}} ): Create the protection policy -> POLICY-KUBERNETES-01"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/protection-policies
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
        {
            "name": "POLICY-KUBERNETES-01",
            "description": "Protect Kubernetes Namespace",
            "assetType": "KUBERNETES",
            "type": "ACTIVE",
            "encrypted": false,
            "enabled": true,
            "priority": 1,
            "dataConsistency": "CRASH_CONSISTENT",
            "passive": false,
            "forceFull": false,
            "details": {
                "vm": {
                    "protectionEngine": "VMDIRECT",
                    "metadataIndexingEnabled": true
                }
            },
            "stages": [
                {
                    "id": "{{ lookup( 'password', '/dev/null length=32' ) | to_uuid }}",
                    "type": "PROTECTION",
                    "passive": false,
                    "attributes": {},
                    "target": {
                        "storageSystemId": "{{ storage.json.content[0].id }}",
                        "dataTargetId": null,
                        "preferredInterface": "{{ storage.json.content[0].details.dataDomain.preferredInterfaces[1].networkAddress }}"
                    },
                    "slaId": null,
                    "sourceStageId": null,
                    "operations": [
                        {
                            "id": "{{ rg1_uuid }}",
                            "backupType": "SYNTHETIC_FULL",
                            "schedule": {
                                "frequency": "HOURLY",
                                "startTime": "2022-02-02T02:00:00.000Z",
                                "duration": "PT10H",
                                "interval": 1
                            }
                        }
                    ],
                    "retention": {
                        "unit": "DAY",
                        "storageSystemRetentionLock": false,
                        "interval": 7
                    },
                    "extendedRetentions": [
                        {
                            "selector": {
                                "operationId": "{{ rg1_uuid }}",
                                "backupType": "SYNTHETIC_FULL"
                            },
                            "retention": {
                                "storageSystemRetentionLock": false,
                                "unit": "DAY",
                                "interval": 5
                            }
                        }
                    ]
                }
            ],
            "filterIds": [],
            "credentials": null,
            "slaId": ""
        }
      status_code: 201
    register: add_rg1_policy

# CREATE THE K8S RULE
  - name: "( {{ppdm_host}} ): Create the protection rule -> RULE-K8S-01"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/protection-rules
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
        {
            "name": "RULE-K8S-01",
            "description": "Protect Kubernetes Namespaces",
            "action": "MOVE_TO_GROUP",
            "actionResult": "{{add_rg1_policy.json.id}}",
            "inventorySourceType": "KUBERNETES",
            "category": "COMPOUND",
            "rules": [
                {
                    "name": "sub1_RULE-K8S-01",
                    "description": "Protect {{ k8s_namespace }} namespace",
                    "action": null,
                    "actionResult": null,
                    "category": "PRIMITIVE",
                    "inventorySourceType": null,
                    "conditionConnector": "AND",
                    "logicalOperator": "AND",
                    "conditions": [
                        {
                            "assetAttributeName": "name",
                            "operator": "EQUALS",
                            "assetAttributeValue": "",
                            "assetAttributeValues": [
                                "{{ namespace }}"
                            ]
                        }
                    ],
                    "priority": null
                }
            ],
            "conditionConnector": "OR",
            "logicalOperator": "OR",
            "conditions": null,
            "priority": -1,
            "tenant": {
                "id": "00000000-0000-4000-a000-000000000000"
            }
        }
      status_code: 201
    register: add_rg1_rule

  - name: "Pause for 60 seconds for Performing Policy Configuration - {{policy_name}} - PROTECTION"
    ansible.builtin.pause:
      seconds: 60

 # GET THE K8s MACHINE POLICY
  - name: "( {{ppdm_host}} ): Get the virtual machine protection policies LIKE {{policy_name}}"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/protection-policies?filter=name%20lk%20%22{{policy_name}}%25%22
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
    register: policies

# START VIRTUAL MACHINE BACKUPS
  - name: "( {{ppdm_host}} ): Start backup for protection policies LIKE {{policy_name}}"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/protection-policies/{{item.id}}/protections
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
              "assetIds": null,
              "stages": [
                  {
                      "id": "{{ item.stages[0].id }}",
                      "retention": {
                          "interval": 10,
                          "unit": "DAY"
                      },
                      "operation": {
                          "backupType": "FULL"
                      }
                  }
              ]
          }
      status_code: 202
    with_items: "{{ policies.json.content | json_query( '[*]' ) }}"
    register: start_backups




# LOGOUT OF THE REST API
  - name: "( {{ppdm_host}}): Logout of the REST API"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/logout
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      status_code: 204