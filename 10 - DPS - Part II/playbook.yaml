---
# Thanks to clifford.rodriguez@dell.com and go to https://github.com/SkunkworksAutomation for all automation things for DPS
# also check out https://github.com/dell/ansible-datadomain

- name: "Configure PPDM to Backup minecraft namespace and Virtual Machines master, worker-01, worker-02, worker-03"
  hosts: localhost
  collections:
    - community.vmware
  become: no
  gather_facts: false

  vars:
  vars_files:
    - credentials.yaml

  tasks:


# WAIT FOR HTTPS RESPONSE FROM POWERPROTECT DATA DOMAIN
  - name: " {{ddvmname}} - Waiting for HTTPS connectivity."
    wait_for:
      host: "{{ddve_ip}}"
      port: 443
      state: started
      delay: 1
      sleep: 60
      timeout: 600
    register: waitforddve


# WAIT FOR HTTPS RESPONSE FROM POWERPROTECT DATA MANAGER
  - name: "( {{ppdm_ip}} ): Wait for HTTPS connectivity"
    wait_for:
      host: "{{ppdm_ip}}"
      port: 443
      state: started
      delay: 1
      sleep: 60
      timeout: 600
    register: waitforppdm
    

# AUTHENTICATE TO THE POWERPROTECT REST API & GRAB ACCESS TOKEN
  - name: "( {{ppdm_ip}} ): Authenticate to PowerProtect DM Rest API"
    uri:
      url: "https://{{ ppdm_ip }}:8443/api/v2/login"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body:
        username: "{{ ppdm_id }}"
        password: "{{ppdm_pwd}}"
      status_code: 200
    register: token

  - name:
    debug:
      var: token.json.access_token


  - name: "Add VMWARE & KUBERNETES Asset Source on {{ ppdm_ip }}"
    uri:
      url: "https://{{ppdm_ip}}:8443/api/v2/common-settings/ASSET_SETTING"
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: PUT
      validate_certs: no
      return_content: yes
      body_format: json
      status_code: 200
      body: |
        {
          "id": "ASSET_SETTING",
          "properties": [
              {
                  "name": "enabledAssetTypes",
                  "type": "LIST",
                  "value": "VMWARE_VIRTUAL_MACHINE,KUBERNETES"
              }
        ]
        }
    register: asset_sources


# create ppdm namespace
  - name: Create a k8s namespace ppdm
    kubernetes.core.k8s:
      name: ppdm
      api_version: v1
      kind: Namespace
      state: present

# Create a Service Account for PPDM
  - name: Create Service Account for PPDM
    kubernetes.core.k8s:
      state: present
      src: https://raw.githubusercontent.com/DTW2023/IaC/main/10%20-%20DPS%20-%20Part%20II/ppdm-user.yaml

# Generate Token for PPDM User
  - name: get token
    command: "kubectl -n ppdm create token ppdm-user"
    register: ppdm_token

# Show the token, this wiill be used to configure PPDM
  - name: Display Token
    debug:
      var: ppdm_token.stdout_lines[0]

  - name: "Add Credentials for Cluster {{ cluster_ip }} on {{ vmname }}"
    uri:
      url: "https://{{ ppdm_ip }}:8443/api/v2/credentials"
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      status_code: 201
      body: |
        {"type":"KUBERNETES","name":"{{ cluster_name }}","password":"{{ ppdm_token.stdout_lines[0] }}","method":"TOKEN"}
    register: kube_creds

  - name: kube_creds.json.id
    debug:
      var: kube_creds.json.id

  - name: kube_creds.json.secretId
    debug:
      var: kube_creds.json.secretId



  - name: "( {{ ppdm_ip }} ): Get Cert for Kubernetes cluster {{ cluster_ip }}"
    uri:
      url: "https://{{ ppdm_ip }}:8443/api/v2/certificates?host={{ cluster_ip }}&port={{ cluster_port }}&type=Root"
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      # body: |
    register: kube_cert

  - name: kube_cert id
    debug:
      var: kube_cert.json[0].id

  - name: kube_cert fingerprint
    debug:
      var: kube_cert.json[0].fingerprint




    
  # - name: "( {{ ppdm_ip }} ): Accept Cert for Kubernetes cluster {{ cluster_ip }}"
  #   uri:
  #     url: "https://{{ ppdm_ip }}:8443/api/v2/certificates/?host={{cluster_ip}}&port={{cluster_port}}&type=Root"
  #     headers:
  #       Authorization: "Bearer {{token.json.access_token}}"
  #       Content-Type: "application/json"
  #     method: PUT
  #     validate_certs: no
  #     return_content: yes
  #     body_format: json
  #     body: |
  #        {"fingerprint":"{{ kube_cert.json[0].fingerprint }}","host":"{{ cluster_ip }}","id":"{{ kube_cert.json[0].id }}","issuerName":"CN=kubernetes","notValidAfter":"Tue Apr 16 22:40:50 EDT 2024","notValidBefore":"Mon Apr 17 22:40:50 EDT 2023","port":6443,"state":"ACCEPTED","subjectName":"CN=kube-apiserver","type":"HOST"}

  - name: "Add source for for cluster {{ cluster_ip }} on {{ vmname }}"
    uri:
      url: "https://{{ ppdm_ip }}:8443/api/v2/inventory-sources"
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      status_code: 201
      body: |
        {"id":"","name":"{{ cluster_name }}","version":"","type":"KUBERNETES","lastDiscovered":"","address":"{{ cluster_ip}}","port":"{{ cluster_port }}","credentials":{"id":"{{ kube_creds.json.id }}"},"ssl":false,"details":{"k8s":{"vCenterId":null,"distributionType":"NON_VSPHERE","configurations":[]}},"_links":{}}
    register: kube_source


  - name: "Pause for 60 seconds for Initial Discovery for inventory source {{ cluster_name }}"
    ansible.builtin.pause:
      seconds: 60

#Create a ppdm-snapshot-storage-class-mapping for PPDM in namespace powerprotect
  - name: Create Service Account for PPDM in namespace powerprotect
    kubernetes.core.k8s:
      state: present
      src: https://raw.githubusercontent.com/DTW2023/IaC/main/9%20-%20DPS/snapshot-configmap.yaml


  - name: "Add Protection Policy for namespace on Kubernetes cluster {{ cluster_ip }} backing up via {{ ppdm_ip }}"
    uri:
      url: "https://{{ ppdm_ip }}:8443/api/v2/protection-policies"
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      status_code: 201
      body: |
        {
            "name": "{{ namespace }}",
            "description": "DTW backing up {{namespace}}",
            "assetType": "KUBERNETES",
            "type": "ACTIVE",
            "encrypted": false,
            "enabled": true,
            "priority": 1,
            "dataConsistency": "CRASH_CONSISTENT",
            "passive": false,
            "forceFull": false,
            "details": {
                "vm": {
                    "protectionEngine": "VMDIRECT"
                }
            },
            "stages": [
                {
                    "id": "e7184df6-7baa-5f82-8f2b-171aa9e85964",
                    "type": "PROTECTION",
                    "passive": false,
                    "attributes": {},
                    "target": {
                        "storageSystemId": "42a8cc0c-89ed-4ff6-a98f-e5036fb6e2b9",
                        "dataTargetId": null,
                        "preferredInterface": "{{ ddve_ip }}",
                        "preferredInterfaceId": "ethV0"
                    },
                    "slaId": null,
                    "sourceStageId": null,
                    "operations": [
                        {
                            "id": "9ed605cb-e14d-c265-b62a-d53391e15e6b",
                            "backupType": "SYNTHETIC_FULL",
                            "schedule": {
                                "frequency": "HOURLY",
                                "startTime": "2023-04-18T19:00:00.000Z",
                                "duration": "PT10H",
                                "interval": 1
                            }
                        }
                    ],
                    "retention": {
                        "id": "47f9b875-4f4b-8b7e-3605-7d6e6fb55131",
                        "unit": "DAY",
                        "storageSystemRetentionLock": false,
                        "interval": 1
                    },
                    "extendedRetentions": [
                        {
                            "selector": {
                                "operationId": "9ed605cb-e14d-c265-b62a-d53391e15e6b",
                                "backupType": "SYNTHETIC_FULL"
                            },
                            "retention": {
                                "id": "c7fc2430-5573-b70d-d652-48f5f0f6a4f9",
                                "storageSystemRetentionLock": false,
                                "unit": "DAY",
                                "interval": 1
                            }
                        }
                    ]
                }
            ],
            "filterIds": [],
            "credentials": null,
            "slaId": ""
            }
    register: kube_pp





# LOGOUT OF THE REST API
#  - name: "( {{ ppdm_ip }}): Logout of the REST API"
#    uri:
#      url: "https://{{ ppdm_ip }}:8443/api/v2/logout"
#      headers:
#        Authorization: "Bearer {{token.json.access_token}}"
#        Content-Type: "application/json"
#      method: POST
#      validate_certs: no
#      return_content: yes
#      body_format: json
#      status_code: 204
