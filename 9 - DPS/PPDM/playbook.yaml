---
# Thanks to clifford.rodriguez@dell.com and go to https://github.com/SkunkworksAutomation for all automation things for DPS
# also check out https://github.com/dell/ansible-datadomain

- name: "PowerProtect Data Manager stack deployment demo"
  hosts: localhost
  collections:
    - community.vmware
  become: no
  gather_facts: false

  vars:
  vars_files:
    - credentials.yaml

  tasks:


# DEPLOY THE PPDM IN VCENTER, didn't deploy the OVA because it takes too long configuring SSL keys on first boot
  - name: "Deploy Virtual Machine  {{vmname}}"
    vmware_guest:
      hostname: "{{ vcenter_host }}"
      username: "{{ vc_username }}"
      password: "{{vc_password }}"
      validate_certs: "{{ validate_certs }}"
      name: "{{ vmname }}"
      template: "{{ vm_template }}"
      datacenter: "{{ vcenter_dc }}"
      esxi_hostname: "{{ vcenter_esx }}"
      folder: 'vm'
      datastore: "{{ vcenter_ds }}"
      state: poweredon


# WAIT FOR HTTPS RESPONSE FROM POWERPROTECT DATA MANAGER
  - name: "( {{ppdm_host}} ): Wait for HTTPS connectivity"
    wait_for:
      host: "{{ppdm_ip}}"
      port: 443
      state: started
      delay: 1
      sleep: 60
      timeout: 600
    register: waitforppdm

# AUTHENTICATE TO THE POWERPROTECT REST API & GRAB ACCESS TOKEN
  - name: "( {{ppdm_host}} ): Authenticate to PowerProtect DM Rest API"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/login
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body:
        username: "{{ ppdm_id }}"
        password: "{{ppdm_old_pwd}}"
      status_code: 200
    register: token

  - name:
    debug:
      var: token.json.access_token

# ACCEPT THE POWERPROTECT EULA
  - name: "( {{ppdm_host}} ): Accept the PowerProtect EULA"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/eulas/PPDM
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: PATCH
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
            "accepted":true
          }
      status_code: 200
    register: eula

# GET THE INITIAL CONFIGURATION ID
  - name: "( {{ppdm_host}} ): Get the initial PowerProtect configuration"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/configurations
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
    register: config
  
  - name:
    debug:
      var: config.json.content[0].id

 
# GET THE INITIAL CONFIGURATION ID
  - name: "( {{ppdm_host}} ): Get the initial PowerProtect configuration"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/configurations
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
    register: config
  
  - name:
    debug:
      var: config.json.content[0].id

# START THE INITIAL CONFIGURATION 19.13
  - name: "( {{ppdm_host}} ): Start the initial PowerProtect configuration - {{config.json.content[0].id}}"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/configurations/{{config.json.content[0].id}}
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: PUT
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
            "id": "{{config.json.content[0].id}}",
            "nodeId": "{{config.json.content[0].nodeId}}",
              "networks": [
                {
                  "fqdn": "{{ppdm_host}}.{{ad_domain}}",
                  "ipAddress": [
                      "{{ppdm_ip}}"
                  ],
                  "ipAddressFamily": "{{config.json.content[0].networks[0].ipAddressFamily}}",
                  "interfaceName": "{{config.json.content[0].networks[0].interfaceName}}",
                  "netMask": "{{ppdm_netmask}}",
                  "gateway": "{{ppdm_gateway}}",
                  "dnsServers": [
                      "{{ppdm_dns}}"
                  ],
                  "searchDomains": [
                    "vcorp.local"
                  ],
                  "nslookupSuccess": true
              },
              {
                  "ipAddress": [
                      "{{config.json.content[0].networks[1].ipAddress[0]}}"
                  ],
                  "ipAddressFamily": "{{config.json.content[0].networks[1].ipAddressFamily}}",
                  "interfaceName": "{{config.json.content[0].networks[1].interfaceName}}",
                  "netMask": "{{config.json.content[0].networks[1].netMask}}",
                  "prefix": "{{config.json.content[0].networks[1].prefix}}",
                  "ipAddressIpv6": [
                      "{{config.json.content[0].networks[1].ipAddressIpv6[0]}}"
                  ]
              }
          ],
            "ntpServers": [
                "{{ppdm_ntp}}"
            ],
            "timeZone": "{{ppdm_timezone}}",
            "osUsers": [
                {
                    "userName": "root",
                    "description": "OS root user account",
                    "numberOfDaysToExpire": 60,
                    "expirationDays": 60,
                    "remainingExpirationDays": 60,
                    "password": "changeme",
                    "newPassword": "{{ppdm_pwd}}"
                },
                {
                    "userName": "admin",
                    "description": "OS administrator user account",
                    "numberOfDaysToExpire": 60,
                    "expirationDays": 60,
                    "remainingExpirationDays": 60,
                    "password": "@ppAdm1n",
                    "newPassword": "{{ppdm_pwd}}"
                },
                {
                    "userName": "support",
                    "description": "OS support user account",
                    "numberOfDaysToExpire": 60,
                    "expirationDays": 60,
                    "remainingExpirationDays": 60,
                    "password": "$upp0rt!",
                    "newPassword": "{{ppdm_pwd}}"
                }
            ],
            "lockbox": {
                "name": "Lockbox",
                "lastUpdatedTime": "{{config.json.content[0].lockbox.lastUpdatedTime}}",
                "passphrase": "Ch@ngeme1",
                "newPassphrase": "{{ppdm_pwd}}"
            },
            "configType": "standalone",
            "gettingStartedCompleted": false,
            "autoSupport": false,
            "integratedStorageSecuritySetupCompleted": false,
            "deployedPlatform": "VMWARE",
            "applicationUserPassword": "{{ppdm_pwd}}"
          }
      status_code: 202
    register: start_config


# PAUSE THE PLAY FOR 1 MINUTE (BUG in 19.12 INVALIDATES THE TOKEN SO WE WAIT THEN REAUTHENTICATE TO WORK AROUND THE ISSUE)
  - name: Wait for 1 minute then try to re-authenticate
    ansible.builtin.pause:
      minutes: 1
  
# Create a Service Account for PPDM
 - name: Create Service Account for PPDM
    kubernetes.core.k8s:
      state: present
      src: https://raw.githubusercontent.com/DTW2023/IaC/main/9%20-%20DPS/PPDM/ppdm-user.yaml

# Generate Token for PPDM User
  - name: get token
    command: "kubectl -n kubernetes-dashboard create token ppdm-user"
    register: ppdm_token

# Show the token, this wiill be used to configure PPDM
  - name: Display Token
    debug:
      var: ppdm_token.stdout_lines[0]

# REAUTHENTICATE AND GRAB A NEW TOKEN
  - name: "( {{ppdm_host}} ): Re-authenticate to PowerProtect DM Rest API"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/login
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body:
        username: "{{ppdm_id}}"
        password: "{{ppdm_pwd}}"
      status_code: 200
    register: token
    until: token.status == 200
    retries: 3
    delay: 60

  - name:
    debug:
      var: token.json.access_token

# GET THE CONFIG STATUS
  - name: "( {{ppdm_host}} ): Check the PowerProtect config status to see if it is complete"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/configurations/{{config.json.content[0].id}}/config-status
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
    register: monitor
    until: monitor.status == 200 and monitor.json.percentageCompleted == 100
    retries: 180
    delay: 10

# GET THE VCENTER CERTIFICATE
  - name: "( {{ppdm_host}} ): Get the vCenter Certificate"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/certificates?host={{vcenter_host}}&port=443&type=Host
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
      status_code: 200
    register: vc_cert
    until: vc_cert.status == 200
    retries: 90
    delay: 10

  - name:
    debug:
      var: vc_cert.json[0]


# ACCEPT THE VCENTER CERTIFICATE
  - name: "( {{ppdm_host}} ): Accept the vCenter certificate"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/certificates/{{vc_cert.json[0].id}}
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: PUT
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
            "fingerprint": "{{vc_cert.json[0].fingerprint}}",
            "host": "{{vc_cert.json[0].host}}",
            "id": "{{vc_cert.json[0].id}}",
            "issuerName": "{{vc_cert.json[0].issuerName}}",
            "notValidAfter": "{{vc_cert.json[0].notValidAfter}}",
            "notValidBefore": "{{vc_cert.json[0].notValidBefore}}",
            "port": "{{vc_cert.json[0].port}}",
            "state": "ACCEPTED",
            "subjectName": "{{vc_cert.json[0].subjectName}}",
            "type": "{{vc_cert.json[0].type}}"
          }
      status_code: 200
    register: accept_vc_cert
    until: accept_vc_cert.status == 200
    retries: 90
    delay: 10

  - name:
    debug:
      var: accept_vc_cert.json

# CREATE VCENTER CREDENTIALS
  - name: "( {{ppdm_host}} ): Create vCenter credentials"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/credentials
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
              "type": "VCENTER",
              "username": "{{vcenter_id}}",
              "password": "{{vcenter_pwd}}",
              "name": "ADMINISTRATOR"
          }
      status_code: [200,201,403]
    register: vc_creds
    until: vc_creds.status == 200 or vc_creds.status == 201 or vc_creds.status == 403
    retries: 90
    delay: 10

  - name:
    debug:
      var: vc_creds.json

# ADD THE VCENTER SERVER
  - name: "( {{ppdm_host}} ): Add the vCenter server"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/inventory-sources
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
            "type": "VCENTER",
            "name": "{{vcenter_host}}",
            "port": 443,
            "credentials": {
              "id": "{{vc_creds.json.id}}"
            },
            "address": "{{vcenter_host}}"
          }
      status_code: 201
    register: vcenter
  
  - name:
    debug:
      var: vcenter.json

# GET THE DD CERTIFICATE
  - name: "( {{ppdm_host}} ): Get the Data Domain certificate"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/certificates?host={{ddve_host}}.{{ad_domain}}&port=3009&type=Host
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
      status_code: 200
    register: dd_cert
    until: dd_cert.status == 200
    retries: 90
    delay: 10

  - name:
    debug:
      var: dd_cert.json[0]

# ACCEPT THE DD CERTIFICATE
  - name: "( {{ppdm_host}}): Accept the Data Domain certificate"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/certificates/{{dd_cert.json[0].id}}
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: PUT
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
            "fingerprint": "{{dd_cert.json[0].fingerprint}}",
            "host": "{{dd_cert.json[0].host}}",
            "id": "{{dd_cert.json[0].id}}",
            "issuerName": "{{dd_cert.json[0].issuerName}}",
            "notValidAfter": "{{dd_cert.json[0].notValidAfter}}",
            "notValidBefore": "{{dd_cert.json[0].notValidBefore}}",
            "port": "{{dd_cert.json[0].port}}",
            "state": "ACCEPTED",
            "subjectName": "{{dd_cert.json[0].subjectName}}",
            "type": "{{dd_cert.json[0].type}}"
          }
      status_code: 200
    register: accept_dd_cert
    until: accept_dd_cert.status == 200
    retries: 90
    delay: 10

  - name:
    debug:
      var: accept_dd_cert.json

# CREATE DATA DOMAIN CREDENTIALS
  - name: "( {{ppdm_host}} ): Create Data Domain credentials"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/credentials
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
              "type": "DATADOMAIN",
              "username": "{{ppdd_id}}",
              "password": "{{ppdd_pwd}}",
              "name": "SYSADMIN"
          }
      status_code: [200,201,403]
    register: dd_creds
    until: dd_creds.status == 200 or dd_creds.status == 201 or dd_creds.status == 403
    retries: 90
    delay: 10

  - name:
    debug:
      var: dd_creds.json

# ADD THE DATA DOMAIN STORAGE SYSTEM
  - name: "( {{ppdm_host}} ): Add Data Domain storage system"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/inventory-sources
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
            "type": "EXTERNALDATADOMAIN",
            "name": "{{ddve_host}}",
            "port": 3009,
            "credentials": {
              "id": "{{dd_creds.json.id}}"
            },
            "address": "{{ddve_host}}.{{ad_domain}}"
          }
      status_code: 201
    register: storage
  
  - name:
    debug:
      var: storage.json

# ENABLE AUTOMATIC WHITELISTING
  - name: "( {{ppdm_host}} ): Enable automatic agent whitelisting"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/whitelist/automatic
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
            "ip": "0.0.0.0",
            "state": "AUTOMATIC"
          }
      status_code: 201
    register: whitelist

# ENABLE FILE SYSTEM AND KUBERNETES SERVER ASSET SOURCE
  - name: "( {{ppdm_host}} ): Enable file system and Kubernetes asset source"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/common-settings/ASSET_SETTING
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: PUT
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
              "id": "ASSET_SETTING",
              "properties": [
                  {
                      "name": "enabledAssetTypes",
                      "type": "LIST",
                      "value": "VMWARE_VIRTUAL_MACHINE,FILE_SYSTEM,KUBERNETES"
                  }
              ]
          }
      status_code: 200
    register: settings

# GET THE ACTIVITY FOR THE VCENTER DISCOVERY
  - name: "( {{ppdm_host}} ): Get the activity id for the VM Inventory Discovery"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/activities?filter=name%20eq%20%22VM%20Inventory%20Discovery%22
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
    register: activity

# GET THE ACTIVITY STATUS
  - name: "( {{ppdm_host}} ): Check the VM Inventory Discovery activity status"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/activities/{{ activity.json.content[0].id }}
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
    register: activitystatus
    until: activitystatus.status == 200 and activitystatus.json.progress == 100 and activitystatus.json.state == 'COMPLETED'
    retries: 180
    delay: 10

  - name:
    debug:
      var: activitystatus.json

# IF THE INITIAL VCENTER DISCOVERY FAILED

# GET THE VCENTER INVENTORY SOURCE
  - name: "( {{ppdm_host}} ): Get the vCenter inventory source"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/inventory-sources?filter=name%20eq%20%22{{vcenter_host}}%22
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
    when: activitystatus.json.result.status == "FAILED"
    register: vcenter

# START A MANUAL DISCOVERY
  - name: "( {{ppdm_host}} ): Start a manual discovery of vcenter"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/discoveries
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
            "start":"/inventory-sources/{{vcenter.json.content[0].id}}",
            "level":"DataCopies"
          }
      status_code: 202
    when: activitystatus.json.result.status == "FAILED"
    register: discovery

  - name:
    debug:
      var: discovery.json
      

# Add stuff here!!!!!!!!!


# LOGOUT OF THE REST API
  - name: "( {{ppdm_host}}): Logout of the REST API"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/logout
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      status_code: 204
