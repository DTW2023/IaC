---
# Thanks to clifford.rodriguez@dell.com and go to https://github.com/SkunkworksAutomation for all automation things for DPS
# also check out https://github.com/dell/ansible-datadomain

- name: "PowerProtect Data Domain & Data Manager stack deployment demo"
  hosts: localhost
  collections:
    - community.vmware
  become: no
  gather_facts: false

  vars:
  vars_files:
    - credentials.yaml

  tasks:


# DEPLOY THE DDVE IN VCENTER, didn't deploy the OVA because it takes too long configuring SSL keys on first boot
  - name: "Deploy Virtual Machine  {{ddvmname}}"
    vmware_guest:
       hostname: "{{ vcenter_host }}"
       username: "{{ vc_username }}"
       password: "{{ vc_password }}"
       validate_certs: "{{ validate_certs }}"
       name: "{{ ddvmname }}"
       template: "{{ ddvm_template }}"
       datacenter: "{{ vcenter_dc }}"
       esxi_hostname: "{{ vcenter_esx }}"
       folder: 'vm'
       datastore: "{{ vcenter_ds }}"
       state: poweredon

# WAIT FOR HTTPS RESPONSE FROM POWERPROTECT DATA DOMAIN
  - name: " {{ddvmname}} - Waiting for HTTPS connectivity."
    wait_for:
      host: "{{ddve_ip}}"
      port: 443
      state: started
      delay: 1
      sleep: 60
      timeout: 600
    register: waitforddve


# DEPLOY THE DDVE IN VCENTER, didn't deploy the OVA because it takes too long configuring SSL keys on first boot
  - name: "Deploy Virtual Machine  {{vmname}}"
    vmware_guest:
       hostname: "{{ vcenter_host }}"
       username: "{{ vc_username }}"
       password: "{{ vc_password }}"
       validate_certs: "{{ validate_certs }}"
       name: "{{ vmname }}"
       template: "{{ vm_template }}"
       datacenter: "{{ vcenter_dc }}"
       esxi_hostname: "{{ vcenter_esx }}"
       folder: 'vm'
       datastore: "{{ vcenter_ds }}"
       state: poweredon


# WAIT FOR HTTPS RESPONSE FROM POWERPROTECT DATA MANAGER
  - name: "( {{ppdm_ip}} ): Wait for HTTPS connectivity"
    wait_for:
      host: "{{ppdm_ip}}"
      port: 443
      state: started
      delay: 1
      sleep: 60
      timeout: 600
    register: waitforppdm

# AUTHENTICATE TO THE POWERPROTECT REST API & GRAB ACCESS TOKEN
  - name: "( {{ppdm_ip}} ): Authenticate to PowerProtect DM Rest API"
    uri:
      url: "https://{{ ppdm_ip }}:8443/api/v2/login"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body:
        username: "{{ ppdm_id }}"
        password: "{{ppdm_pwd}}"
      status_code: 200
    register: token

  - name:
    debug:
      var: token.json.access_token

# Create a Service Account for PPDM
  - name: Create Service Account for PPDM
    kubernetes.core.k8s:
      state: present
      src: https://raw.githubusercontent.com/DTW2023/IaC/main/9%20-%20DPS/ppdm-user.yaml

# Generate Token for PPDM User
  - name: get token
    command: "kubectl -n kubernetes-dashboard create token ppdm-user"
    register: ppdm_token

# Show the token, this wiill be used to configure PPDM
  - name: Display Token
    debug:
      var: ppdm_token.stdout_lines[0]

  - name: remove /tmp/ppdm-scripts
    ansible.builtin.file:
      path: /tmp/ppdm-scripts
      state: absent

  - name: Create a directory /tmp/ppdm-scripts
    ansible.builtin.file:
      path: /tmp/ppdm-scripts
      state: directory
      mode: '0755'


  - name: download scripts
    shell:
      cmd: "git clone https://github.com/dell/powerprotect-data-manager.git"
      chdir: /tmp/ppdm-scripts

  - name: "Set Upload Credentials for {{ cluster_ip }} on {{ vmname }}"
    uri:
      url: "https://{{ ppdm_ip }}:8443/api/v2/credentials"
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      status_code: 201
      body: |
        {"type":"KUBERNETES","name":"DTW Kubernetes Cluster","password":"{{ ppdm_token.stdout_lines[0] }}","method":"TOKEN"}
    register: kube_creds

  - name: kube_creds.json.id
    debug:
      var: kube_creds.json.id

  - name: kube_creds.json.secretId
    debug:
      var: kube_creds.json.secretId



  - name: "( {{ ppdm_ip }} ): Get Cert for Kubernetes cluster {{ cluster_ip }}"
    uri:
      url: "https://{{ ppdm_ip }}:8443/api/v2/certificates?host={{ cluster_ip }}&port={{ cluster_port }}&type=Root"
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      # body: |
    register: kube_cert

  - name: kube_cert id
    debug:
      var: kube_cert.json[0].id

  - name: kube_cert fingerprint
    debug:
      var: kube_cert.json[0].fingerprint


  - name: "Set Up source for {{ cluster_ip }} on {{ vmname }}"
    uri:
      url: "https://{{ ppdm_ip }}:8443/api/v2/inventory-sources"
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: PUT
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
        {"id":"","name":"DTW Kubernetes Cluster","version":"","type":"KUBERNETES","lastDiscovered":"","address":"10.204.20.150","port":6443,"credentials":{"id":"{{ kube_creds.json.id }}"},"ssl":false,"details":{"k8s":{"vCenterId":null,"distributionType":"NON_VSPHERE","configurations":[]}},"_links":{}}
    register: kube_source

#Create a ppdm-snapshot-storage-class-mapping for PPDM in namespace powerprotect
#  - name: Create Service Account for PPDM
#    kubernetes.core.k8s:
#      state: present
#      src: https://raw.githubusercontent.com/DTW2023/IaC/main/9%20-%20DPS/snapshot-configmap.yaml

# LOGOUT OF THE REST API
#  - name: "( {{ ppdm_ip }}): Logout of the REST API"
#    uri:
#      url: "https://{{ ppdm_ip }}:8443/api/v2/logout"
#      headers:
#        Authorization: "Bearer {{token.json.access_token}}"
#        Content-Type: "application/json"
#      method: POST
#      validate_certs: no
#      return_content: yes
#      body_format: json
#      status_code: 204
